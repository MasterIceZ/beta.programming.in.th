// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("MIGRATION_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String              @id @default(cuid())
  username        String?             @unique
  name            String?
  email           String?             @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  admin           Boolean             @default(false)
  accounts        Account[]
  sessions        Session[]
  submissions     Submission[]
  bookmarks       Bookmark[]
  assessments     UserOnAssessment[]
  ownedAssessment OwnerOnAssessment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmark {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String

  @@id([taskId, userId])
}

model Task {
  id               String             @id
  title            String             @db.Text
  fullScore        Int
  memoryLimit      Int
  timeLimit        Float
  path             String             @db.Text
  private          Boolean            @default(false)
  type             String             @db.Text
  tags             Tag[]
  bookmarks        Bookmark[]
  submissions      Submission[]
  taskOnAssessment TaskOnAssessment[]

  @@index([id])
}

model Submission {
  id           Int         @id @default(autoincrement())
  taskId       String
  status       String      @default("In Queue")
  submittedAt  DateTime    @default(now())
  time         Int         @default(0)
  memory       Int         @default(0)
  code         Bytes
  codeLength   Int         @default(0)
  score        Int         @default(0)
  groups       Json        @default(dbgenerated())
  language     String
  private      Boolean     @default(false)
  userId       String?
  assessmentId String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull)
  task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Assessment {
  id          String              @id
  name        String              @unique
  archived    Boolean             @default(false)
  description String?
  instruction String?
  submissions Submission[]
  tasks       TaskOnAssessment[]
  users       UserOnAssessment[]
  owners      OwnerOnAssessment[]
  open        DateTime            @default(now())
  close       DateTime
}

model TaskOnAssessment {
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String

  @@id([taskId, assessmentId])
}

model UserOnAssessment {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String

  @@id([userId, assessmentId])
}

model OwnerOnAssessment {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String

  @@id([userId, assessmentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]

  @@index([id])
}
